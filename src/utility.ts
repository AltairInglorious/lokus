import type {
	BasicDictionary,
	BasicLanguage,
	LokusDictionaryFile,
	LokusTranslateFile,
} from "./types.js";

export function extractBaseLanguage<
	DictionaryType extends BasicDictionary = BasicDictionary,
	BaseLanguageType extends BasicLanguage = BasicLanguage,
	LanguageType extends BasicLanguage = BasicLanguage,
>(
	data: LokusDictionaryFile<DictionaryType, BaseLanguageType, LanguageType>,
	timestamp: number = Date.now(),
): LokusDictionaryFile<DictionaryType, BaseLanguageType, never> {
	return {
		type: "dictionary",
		base: data.base,
		baseLanguage: data.baseLanguage,
		dictionaries: {},
		timestamp,
	};
}

export function combineTranslations<
	DictionaryType extends BasicDictionary = BasicDictionary,
	BaseLanguageType extends BasicLanguage = BasicLanguage,
	LanguagesType extends BasicLanguage = BasicLanguage,
>(
	base: LokusDictionaryFile<DictionaryType, BaseLanguageType, LanguagesType>,
	translations: LokusTranslateFile<DictionaryType, LanguagesType>[],
	timestamp = Date.now(),
): LokusDictionaryFile<DictionaryType, BaseLanguageType, LanguagesType> {
	const ret = {
		...base,
		timestamp,
	};
	for (const translation of translations) {
		if (translation.type !== "translate") {
			throw new Error("Invalid translation file type");
		}
		if (translation.language in ret.dictionaries) {
			ret.dictionaries[translation.language] = {
				...ret.dictionaries[translation.language],
				...translation.dictionary,
			};
		} else {
			ret.dictionaries[translation.language] = translation.dictionary;
		}
	}
	return ret;
}

export function getDictionaryType<
	DictionaryType extends BasicDictionary = BasicDictionary,
	BaseLanguageType extends BasicLanguage = BasicLanguage,
	LanguagesType extends BasicLanguage = BasicLanguage,
>(
	data: LokusDictionaryFile<DictionaryType, BaseLanguageType, LanguagesType>,
): string {
	const keys = Object.keys(data.base);
	let ret = "// Autogenerated by Lokus\nexport type DictionaryType = {\n";
	if (keys.length === 0) ret += "};\n";
	else {
		for (const key of keys) {
			ret += `\t"${key}": string;\n`;
		}
		ret += "};\n";
	}
	return ret;
}

export function generateTSConfigFile<
	DictionaryType extends BasicDictionary = BasicDictionary,
	BaseLanguageType extends BasicLanguage = BasicLanguage,
>(data: LokusDictionaryFile<DictionaryType, BaseLanguageType, string>): string {
	let ret = "// Autogenerated by Lokus\nexport const LokusDictionary = {\n";
	ret += `\ttype: "${data.type}",\n`;
	ret += `\tbaseLanguage: "${data.baseLanguage}",\n`;
	ret += `\ttimestamp: ${data.timestamp},\n`;

	ret += "\tbase: {\n";
	for (const [key, value] of Object.entries(data.base)) {
		ret += `\t\t"${key}": "${value}",\n`;
	}
	ret += "\t},\n";

	ret += "\tdictionaries: {\n";
	for (const [language, dictionary] of Object.entries(data.dictionaries)) {
		ret += `\t\t"${language}": {\n`;
		const keys = Object.keys(dictionary);
		for (const key of keys) {
			ret += `\t\t\t"${key}": "${dictionary[key]}",\n`;
		}
		ret += "\t\t},\n";
	}
	ret += "\t},\n";

	ret += "} as const;\n";

	ret += `

export type LokusDictionaryType = Record<
	keyof typeof LokusDictionary.base,
	string
>;

export type LokusLanguageType =
	| keyof typeof LokusDictionary.dictionaries
	| typeof LokusDictionary.baseLanguage;

export function getLokusLanguage(lang?: string): LokusLanguageType {
	if (!lang) return LokusDictionary.baseLanguage;
	if (lang in LokusDictionary.dictionaries) {
		return lang as keyof typeof LokusDictionary.dictionaries;
	}
	return LokusDictionary.baseLanguage;
}

export function getLokusDictionary(
	language: LokusLanguageType,
): LokusDictionaryType {
	if (language === LokusDictionary.baseLanguage) return LokusDictionary.base;
	return {
		...LokusDictionary.base,
		...LokusDictionary.dictionaries[language],
	};
}`;

	return ret;
}
