import type { LokusDictionaryFile } from "../types.js";
import type { ConfigGenerator } from "./interface.js";

export class TypeScriptConfigGenerator implements ConfigGenerator {
	generateConfig(lokusData: LokusDictionaryFile): string {
		let ret = "// Autogenerated by Lokus\nexport const LokusDictionary = {\n";
		ret += `\ttype: "${lokusData.type}",\n`;
		ret += `\tbaseLanguage: "${lokusData.baseLanguage}",\n`;
		ret += `\ttimestamp: ${lokusData.timestamp},\n`;

		ret += "\tbase: {\n";
		for (const [key, value] of Object.entries(lokusData.base)) {
			ret += `\t\t"${key}": "${value}",\n`;
		}
		ret += "\t},\n";

		ret += "\tdictionaries: {\n";
		for (const [language, dictionary] of Object.entries(
			lokusData.dictionaries,
		)) {
			ret += `\t\t"${language}": {\n`;
			const keys = Object.keys(dictionary);
			for (const key of keys) {
				ret += `\t\t\t"${key}": "${dictionary[key]}",\n`;
			}
			ret += "\t\t},\n";
		}
		ret += "\t},\n";

		ret += "} as const;\n";

		ret += `
	
export type LokusDictionaryType = Record<
	keyof typeof LokusDictionary.base,
	string
>;

export type LokusLanguageType =
	| keyof typeof LokusDictionary.dictionaries
	| typeof LokusDictionary.baseLanguage;

export function getLokusLanguage(lang?: string): LokusLanguageType {
	if (!lang) return LokusDictionary.baseLanguage;
	if (lang in LokusDictionary.dictionaries) {
		return lang as keyof typeof LokusDictionary.dictionaries;
	}
	return LokusDictionary.baseLanguage;
}

export function getLokusDictionary(
	language: LokusLanguageType,
): LokusDictionaryType {
	if (language === LokusDictionary.baseLanguage) return LokusDictionary.base;
	return {
		...LokusDictionary.base,
		...LokusDictionary.dictionaries[language],
	};
}`;

		return ret;
	}
}
